#version 430 core
//--------- noise function ---------------------------------------------
//
// Description : Array and textureless GLSL 2D/3D/4D simplex 
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : stegu
//     Lastmod : 20201014 (stegu)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//               https://github.com/stegu/webgl-noise
// 

vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
     return mod289(((x*34.0)+10.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v)
  { 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
  //   x1 = x0 - i1  + 1.0 * C.xxx;
  //   x2 = x0 - i2  + 2.0 * C.xxx;
  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

// Permutations
  i = mod289(i); 
  vec4 p = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.5 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 105.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) );
  }
//----------------------------------------------------------------------


layout(local_size_x = 1,local_size_y = 1,local_size_z = 1) in;

layout(std430, binding =0) buffer TriangleLookUp{
	
	int trianglesTable[];

};
layout(std430, binding =1) buffer VertexBuffer{
	
	float vertexBuffer[];

};

uniform int resolution;

uniform vec3 offSet;
uniform float isoLevel;

vec4 cubePos[8] = vec4[8](
        vec4(-0.5,-0.5,-0.5, 0.0)/float(gl_NumWorkGroups.x),    //v0
        vec4( 0.5,-0.5,-0.5, 0.0)/float(gl_NumWorkGroups.x),   //v1
        vec4( 0.5,-0.5, 0.5, 0.0)/float(gl_NumWorkGroups.x),    //v2
        vec4(-0.5,-0.5, 0.5, 0.0)/float(gl_NumWorkGroups.x),    //v3
                                 
        vec4(-0.5, 0.5,-0.5, 0.0)/float(gl_NumWorkGroups.x),    //v4
        vec4( 0.5, 0.5,-0.5, 0.0)/float(gl_NumWorkGroups.x),   //v5
        vec4( 0.5, 0.5, 0.5, 0.0)/float(gl_NumWorkGroups.x),    //v6
        vec4(-0.5, 0.5, 0.5, 0.0)/float(gl_NumWorkGroups.x)     //v7
);

ivec2 edgeIndices[12] = ivec2[12](
        ivec2(0, 1),   //edge0
        ivec2(1, 2),   //edge1
        ivec2(2, 3),   //edge2
        ivec2(3, 0),   //edge3
        ivec2(4, 5),   //edge4
        ivec2(5, 6),   //edge5
        ivec2(6, 7),   //edge6
        ivec2(7, 4),   //edge7
        ivec2(4, 0),   //edge8
        ivec2(1, 5),   //edge9
        ivec2(2, 6),   //edge10
        ivec2(3, 7)    //edge11
);
float cubeDensities[8];
float RawNoise(vec3 ws, float scale,float frequency, float weigth, vec3 offSet){

    return (snoise(vec3(ws.x/ scale * frequency + offSet.x , ws.y / scale * frequency + offSet.y,ws.z / scale * frequency + offSet.z)))*weigth;

}
float ApplyOctave_Raw(vec3 ws, float octave, float scale, vec3 offSet ){

        float frequency = 1.0;
        float weigth = 1.0;
        float noiseVal = 0.0;
        float lacunarity = 2.0;
        float persistance = 0.5;
        float divisonVal = 0.0;


        for(int i = 0 ; i< octave; i++){

            noiseVal+=RawNoise( ws ,scale,frequency,weigth , offSet);

            divisonVal += weigth;
            frequency *= lacunarity;
            weigth*= persistance;
    
        }

        noiseVal = noiseVal /divisonVal;
        return noiseVal;

}
// this function should be same with actual density funciton in marchingCubes.comp
float densityFunc(vec4 ws){
    float density = ApplyOctave_Raw(ws.xyz,4,5,vec3(0.0));
    //density += snoise(ws.xyz*4.03)*0.25;
    //density += snoise(ws.xyz*1.96)*0.50;
    //density += snoise(ws.xyz*1.01)*1.00;
	return density;
}
int GetCubeIndex(){
    int index = 0;
    for(int i = 0; i<8;i++){
        if(cubeDensities[i]>isoLevel)
            index = index | int(pow(2,i)) ;
    }
    return index;
}


bool compareVectorsSmaller(vec4 left, vec4 right){
        if (left.x < right.x)
            return true;
        else if (left.x > right.x)
            return false;

        if (left.y < right.y)
            return true;
        else if (left.y > right.y)
            return false;

        if (left.z < right.z)
            return true;
        else if (left.z > right.z)
            return false;

        return false;

}
vec4 interpolateVerticesFromEdgeIndices(int index){
    vec4 result;
    vec4 v1= cubePos[edgeIndices[index].x];
    float v1W = cubeDensities[edgeIndices[index].x];
    vec4 v2= cubePos[edgeIndices[index].y];
    float v2W = cubeDensities[edgeIndices[index].y];
    if(compareVectorsSmaller(v2,v1)){
        //swap vectors
        vec4 temp;
        temp = v1;
        v1 = v2;
        v2 = temp;
        //swap weights
        float tempW;
        tempW = v1W;
        v1W = v2W;
        v2W = tempW;

    }
    if(abs(v1W - v2W) > 0.00001){
        result = v1 + (v2- v1)/(v2W- v1W) *(isoLevel-v1W);
    }else{
        result  = v1;
    }
    return result;
}

/*



*/

vec4 vertices[15]=vec4[](
    vec4(-999.0),vec4(-999.0),vec4(-999.0),
    vec4(-999.0),vec4(-999.0),vec4(-999.0),
    vec4(-999.0),vec4(-999.0),vec4(-999.0),
    vec4(-999.0),vec4(-999.0),vec4(-999.0),
    vec4(-999.0),vec4(-999.0),vec4(-999.0)
);

void SetVerticesToBuffer(uint cI){
    for(int i = 0; i<15;i++){
        vertexBuffer[cI*45+i*3] = vertices[i].x;
        vertexBuffer[cI*45+i*3+1] = vertices[i].y;
        vertexBuffer[cI*45+i*3+2] = vertices[i].z;
    }



}
void main(){
    
     uint currentCubePointIndex = gl_WorkGroupID.z*(gl_NumWorkGroups.y *gl_NumWorkGroups.x) + gl_WorkGroupID.y *(gl_NumWorkGroups.x)  + gl_WorkGroupID.x  ;
     vec4 worldPosOfCubeCenter = vec4(	gl_WorkGroupID.x /float(gl_NumWorkGroups.x),
							            gl_WorkGroupID.y /float(gl_NumWorkGroups.y),
							            gl_WorkGroupID.z /float(gl_NumWorkGroups.z),
                                        0.0);
     worldPosOfCubeCenter += vec4(offSet,0.0);
     // update current cube and densities
     for(int i = 0; i< 8;i++){
        cubePos[i] += worldPosOfCubeCenter;
        cubeDensities[i] = densityFunc(cubePos[i]);
     }
     int index = GetCubeIndex();

     for(int i = 0;trianglesTable[index*16+i]!=-1 ; i+=3){
        vertices[i] = interpolateVerticesFromEdgeIndices(trianglesTable[index*16 +i]);
        vertices[i+1] = interpolateVerticesFromEdgeIndices(trianglesTable[index*16 +i+1]);
        vertices[i+2] = interpolateVerticesFromEdgeIndices(trianglesTable[index*16 +i+2]);
      
     }
     SetVerticesToBuffer(currentCubePointIndex);

}